<?php declare(strict_types=1);
/**
 * Copyright Â© 2023-present ParadoxLabs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Need help? Try our knowledgebase and support system:
 *
 * @link https://support.paradoxlabs.com
 */

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var Hyva\Theme\ViewModel\HyvaCsp $hyvaCsp */

$code = $escaper->escapeJs($block->getMethodCode());
$inlineScript = <<<JS
    'use strict';

    window.addEventListener('checkout:init:validation', event => {
        hyvaCheckout.evaluation.registerValidator(
            'validate{$code}',
            async (element, component) => {
                return new Promise((resolve, reject) => {
                    window.dispatchEvent(
                        new CustomEvent('checkout:validate:{$code}', {detail: {resolve, reject}})
                    );
                });
            }
        );
    });

    function {$code}PaymentForm() {
        return {
            storedCards: this.\$wire.entangle('storedCards'),
            selectedCard: '',
            communicatorActive: false,
            iframeInitialized: false,
            showHostedForm: true,
            showTermsNotice: false,
            componentInitialized: false,
            processingSave: false,
            timeoutReloader: null,
            timeoutCommunicator: null,
            config: {},
            payment: {
                method: '{$code}',
                card_id: '',
                save: true,
                transaction_id: '',
                cc_cid: null
            },
            state: {
                cc_cid_length: 3,
                cc_type: '',
            },
            initForm: function(config) {
                if (this.componentInitialized) {
                    return;
                }

                this.config = JSON.parse(this.\$el.dataset.config);
                this.selectedCard = this.config.selectedCard;
                this.payment.card_id = this.config.selectedCard;
                this.payment.save = this.config.defaultSaveCard;

                window.addEventListener(
                    'checkout:validate:{$code}',
                    this.prepareSubmit.bind(this)
                );

                window.addEventListener('message', this.handleCommunication.bind(this));
                document.addEventListener('checkout:payment:method-activate', this.toggleOrderButton.bind(this));
                document.removeEventListener('{$code}InitHostedForm', this.loadHostedForm.bind(this));
                document.addEventListener('{$code}InitHostedForm', this.loadHostedForm.bind(this));
                this.\$watch('selectedCard', this.changeSelectedCard.bind(this));

                if (document.querySelectorAll('[wire\\\\:id=checkout\\\\.terms-conditions]').length) {
                    this.evaluateTerms();

                    Magewire.hook('message.processed', (message, component) => {
                        if (component.id === 'checkout.terms-conditions') {
                            this.evaluateTerms();
                        }
                    });
                }

                this.changeSelectedCard();

                this.componentInitialized = true;
            },
            changeSelectedCard: function() {
                this.showHostedForm = !this.selectedCard;
                this.payment.card_id = this.selectedCard;

                if (!!this.selectedCard) {
                    this.payment.transaction_id = '';
                    this.state.cc_type = this.storedCards[this.selectedCard].type;
                    this.state.cc_cid_length = this.state.cc_type === 'AE' ? 4 : 3;
                }

                if (this.iframeInitialized === false
                    && this.showHostedForm === true
                    && this.showTermsNotice === false) {
                    // The initialized flag is to debounce and ensure we don't reinit unless absolutely necessary.
                    this.resetHostedForm();
                }

                this.toggleOrderButton();
            },
            resetHostedForm: function() {
                clearTimeout(this.timeoutReloader);
                clearTimeout(this.timeoutCommunicator);

                this.\$wire.call('initHostedForm');
            },
            toggleOrderButton: function(event) {
                let method = event && event.detail
                             ? event.detail.method
                             : document.querySelector('input[name="payment-method-option"]:checked').value;

                if (method === '{$code}' && this.showHostedForm) {
                    document.querySelector('.btn-primary[x-bind~="buttonPlaceOrder"]').style.display = 'none';
                } else {
                    document.querySelector('.btn-primary[x-bind~="buttonPlaceOrder"]').style.display = 'block';
                }
            },
            loadHostedForm: function(event) {
                if (this.\$el.isConnected === false) {
                    return;
                }

                let data = event.detail;

                var iframe = this.\$el.querySelector('iframe');

                var form = document.createElement('form');
                form.target = iframe.name;
                form.method = 'post';
                form.action = data.iframeAction;

                for (let fieldKey in data.iframeParams) {
                    var input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = fieldKey;
                    input.value = data.iframeParams[fieldKey];
                    form.appendChild(input);
                }

                this.\$el.appendChild(form);
                form.submit();

                // Reload the hosted form when it expires
                this.timeoutReloader = setTimeout(this.reloadExpiredHostedForm.bind(this), 15*60*1000);

                // Verify communicator connected
                this.communicatorActive = false;
                this.timeoutCommunicator = setTimeout(this.checkCommunicator.bind(this), 20*1000);

                // There's an awkward break between 400-750px; set max width to avoid scrolling.
                if (iframe.scrollWidth > 400 && iframe.scrollWidth < 750) {
                    iframe.style.maxWidth = '400px';
                    iframe.style.margin   = '0 auto';
                }

                this.iframeInitialized = true;
            },
            reloadExpiredHostedForm: function() {
                if (this.iframeInitialized === true) {
                    // If form has expired (15 minutes), and is still being displayed, force reload it.
                    this.resetHostedForm();
                }
            },
            checkCommunicator: function() {
                if (this.communicatorActive
                    || !this.showHostedForm
                    || !this.showTermsNotice
                    || this.iframeInitialized === false) {
                    return;
                }

                console.error('No message received from communicator.');
                this.\$wire.call('notifyCommunicatorFailure');
            },
            handleCommunication: function(event) {
                if (!event.data
                    || !event.data.action
                    || this.showHostedForm === false) {
                    return;
                }

                if (typeof location.origin === 'undefined') {
                    location.origin = location.protocol + '//' + location.host;
                }

                if (event.origin !== location.origin) {
                    console.error('Ignored untrusted message from ' + event.origin);
                    return;
                }

                this.communicatorActive = true;

                switch (event.data.action) {
                    case 'cancel':
                        this.resetHostedForm();
                        break;
                    case 'transactResponse':
                        this.handleResponse(JSON.parse(event.data.response));
                        break;
                    case 'successfulSave':
                        this.handleSave(event.data);
                        break;
                    case 'resizeWindow':
                        if (event.data.height > 0) {
                            var height = Math.ceil(parseFloat(event.data.height)) + 80;
                            this.\$el.querySelector('iframe').style.height = height + 'px';
                        }
                        break;
                }
            },
            handleResponse: function(response) {
                if (response.createPaymentProfileResponse !== undefined
                    && response.createPaymentProfileResponse.success === 'true') {
                    this.payment.save = true;
                } else {
                    this.payment.save = false;
                }

                this.payment.transaction_id = response.transId;

                /**
                 * NOTE: To split iframe submission from Place Order (for steps after payment), nullify
                 * the functionality of this.toggleOrderButton() and this.placeMagentoOrder().
                 */
                this.placeOrder();
            },
            handleSave: function(data) {
                if (this.processingSave) {
                    return;
                }

                this.processingSave = true;

                this.\$wire.call('getNewCard', data)
                    .then(this.afterAddCard.bind(this));
            },
            afterAddCard: function(data) {
                this.iframeInitialized = false;
                this.processingSave = false;

                this.selectedCard = Object.keys(this.storedCards).at(-1);
                this.changeSelectedCard();

                let cvvField = this.\$el.querySelector('#{$code}-cc-cid');
                if (cvvField !== null) {
                    cvvField.focus();
                }
            },
            prepareSubmit: function(event) {
                let payload = Object.assign({}, this.payment);

                hyvaCheckout.storage.setValue(
                    'payment',
                    payload
                );

                if (event && event.detail && event.detail.resolve) {
                    event.detail.resolve(true);
                }
            },
            placeOrder: function() {
                hyvaCheckout.order.place();
            },
            evaluateTerms: function() {
                try {
                    const terms = Magewire.find('checkout.terms-conditions').get('termAcceptance');
                    for (let i in terms) {
                        if (terms[i] === false) {
                            this.showTermsNotice = true;
                            return;
                        }
                    }
                } catch (e) {
                    // No-op -- catch errors in case the component doesn't exist yet
                }

                this.showTermsNotice = false;

                this.changeSelectedCard();
            },
            validateCvv(e) {
                const cvv = e.target.value;
                const valid = (cvv.length === this.state.cc_cid_length);

                e.target.setCustomValidity(valid ? '' : "{$escaper->escapeHtml(__('Please enter a valid %1.'))}".replace('%1', this.state.cc_type.code.name));
                if (!valid) {
                    e.target.reportValidity();
                }

                return this.setCcCid();
            },
            getCcCid() {return this.payment.cc_cid},
            getCcCidLabel() {return (this.state.cc_type?.code.name || 'CVV') + ' '},
            getCcCidLength() {return this.state.cc_cid_length},
            getCcCidPlaceholder() {return this.state.cc_cid_length === 4 ? '0000' : '000'},
            hideHostedForm() {return !this.showHostedForm},
            hideTermsNotice() {return !this.showTermsNotice},
            isStoredCardSelected() {return this.storedCard.hash === this.selectedCard},
            setCcCid() {return this.payment.cc_cid = this.\$el.value},
            setSelectedCard() {return this.selectedCard = this.\$el.value},
            showStoredCards() {return Object.keys(this.storedCards).length > 0},
        }
    }

    window.addEventListener('alpine:init', () => Alpine.data('{$code}PaymentForm', {$code}PaymentForm), {once: true});
JS;
?>
<script><?= /* @noEscape */ $inlineScript ?></script>
<?php $hyvaCsp->registerInlineScript() ?>

<?php $inlineStyle = <<<CSS
    \#{$code}_iframe {
        min-width: 300px;
        height: 400px;
        border: 0;
    }
CSS;
?>
<?php if (isset($secureRenderer) && $secureRenderer instanceof \Magento\Framework\View\Helper\SecureHtmlRenderer): ?>
    <?= /* @noEscape */ $secureRenderer->renderTag('style', [], $inlineStyle, false) ?>
<?php else: ?>
    <style><?= /* @noEscape */ $inlineStyle ?></style>
<?php endif; ?>
