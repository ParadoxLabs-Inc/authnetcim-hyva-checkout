<?php declare(strict_types=1);
/**
 * Copyright Â© 2023-present ParadoxLabs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Need help? Try our knowledgebase and support system:
 *
 * @link https://support.paradoxlabs.com
 */

use Hyva\Theme\Model\ViewModelRegistry;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use ParadoxLabs\Authnetcim\Model\ConfigProvider;
use ParadoxLabs\AuthnetcimHyvaCheckout\Magewire\Payment\Authnetcim;
use ParadoxLabs\AuthnetcimHyvaCheckout\ViewModel\PaymentForm;

/** @var Template $block */
/** @var Authnetcim $magewire */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */
/** @var PaymentForm $formViewModel */

$code           = $escaper->escapeHtmlAttr($block->getData('method_code'));
$formViewModel  = $viewModels->require(PaymentForm::class);
$formBlock      = $formViewModel->getFormBlock($code);
$method         = $formBlock->getMethod();
$image          = $formBlock->getBrandingImage();
?>
<div class="<?= $code ?>"
     x-data="<?= $code ?>PaymentForm($el, $wire)"
     x-init="init()"
>
    <?php if ($image): ?>
        <div class="flex justify-end mb-2">
            <img src="<?= $escaper->escapeUrl($image); ?>" alt="<?= $escaper->escapeHtmlAttr($method->getTitle()) ?>" />
        </div>
    <?php endif; ?>

    <?php if ($method->getConfigData('form_type') !== ConfigProvider::FORM_HOSTED): ?>
        <p class="message error my-8">
            <?= $escaper->escapeHtml(__('This payment method only supports Accept Hosted for Hyva Checkout. Please change the "Payment Form Type" to "Accept Hosted" in the payment method settings.')) ?>
        </p>
    <?php endif; ?>

    <template x-if="storedCards">
        <div class="field mb-2">
            <label for="<?= $code ?>-card-id" class="block font-medium text-gray-700">
                <?= $escaper->escapeHtml(__('Payment Information')) ?>
            </label>
            <select id="<?= $code ?>-card-id"
                    name="payment[card_id]"
                    class="block w-full shadow-sm border-gray-300 rounded-md"
                    wire:model.defer="selectedCard"
                    wire:select.debounce.300ms.blur
                    x-model="selectedCard"
                    <?php if ($magewire->hasError('selectedCard')): ?>
                        aria-invalid="true" aria-errormessage="selected-card-error"
                    <?php endif ?>
            >
                <template x-for="storedCard in storedCards" :key="storedCard.hash">
                    <option :value="storedCard.hash"
                            :data-type="storedCard.type"
                            :selected="storedCard.hash === selectedCard"
                            x-text="storedCard.label">
                    </option>
                </template>
                <option value=''><?= $escaper->escapeHtml(__('Add new card')) ?></option>
            </select>

            <?php if ($magewire->hasError('selectedCard')): ?>
                <span class="text-red-800" id="selected-card-error">
                    <?= $escaper->escapeHtml($magewire->getError('selectedCard')) ?>
                </span>
            <?php endif ?>
        </div>
    </template>

    <div class="card p-0"
         x-show="showHostedForm"
         wire:ignore
    >
        <iframe src="about:blank" id="<?= $code ?>_iframe" name="<?= $code ?>_iframe" class="w-full"></iframe>
    </div>

    <?php if (!$formBlock->isGuestCheckout() && (bool)$method->getConfigData('allow_unsaved') === false): ?>
        <div x-show="showHostedForm" x-cloak>
            <p class="text-secondary mt-4 text-sm"><?= $escaper->escapeHtml(__('For your convenience, this data will be stored securely by our payment processor.')) ?></p>
        </div>
    <?php endif; ?>

    <?php if ($formBlock->hasVerification() && $method->getConfigData('require_ccv')): ?>
        <div class=""
             x-show="!showHostedForm"
             x-cloak
        >
            <label for="<?= $code ?>-cc-cid" class="block font-medium text-gray-700">
                <?= $escaper->escapeHtml(__('Card Verification Number')) ?>
            </label>
            <input type="text"
                   title="<?= $escaper->escapeHtmlAttr(__('Card Verification Number')) ?>"
                   class="block w-16 shadow-sm border-gray-300 rounded-md"
                   id="<?= $code ?>-cc-cid"
                   name="payment[cc_cid]"
                   wire:model.debounce.1500ms.blur="paymentCcCid"
                   value=""
                   autocomplete="cc-csc"
                   minlength="3"
                   maxlength="4"
                    <?php if ($magewire->hasError('paymentCcCid')): ?>
                        aria-invalid="true" aria-errormessage="payment-cc-cid-error"
                    <?php endif ?>
            />

            <?php if ($magewire->hasError('paymentCcCid')): ?>
                <span class="text-red-800" id="payment-cc-cid-error">
                    <?= $escaper->escapeHtml($magewire->getError('paymentCcCid')) ?>
                </span>
            <?php endif ?>
        </div>
    <?php endif; ?>

    <?= $block->getChildHtml(); ?>

    <style>
        #<?= $code ?>_iframe {
            min-width: 300px;
            height: 400px;
        }
    </style>
    <script>
        // TODO: Handle script init on magewire update
        'use strict';

        const <?= $code ?>PaymentForm = ($el, $wire) => {
            return {
                storedCards: $wire.entangle('storedCards'),
                selectedCard: $wire.entangle('selectedCard'),
                communicatorActive: false,
                iframeInitialized: false,
                showHostedForm: true,
                componentInitialized: false,
                processingSave: false,
                init: function() {
                    if (this.componentInitialized) {
                        return;
                    }

                    window.addEventListener('message', this.handleCommunication.bind(this));
                    document.addEventListener('checkout:payment:method-activate', this.toggleOrderButton.bind(this));
                    document.addEventListener('<?= $code ?>InitHostedForm', this.loadHostedForm.bind(this));
                    this.$watch('selectedCard', this.changeSelectedCard.bind(this));

                    this.changeSelectedCard();

                    this.componentInitialized = true;
                },
                changeSelectedCard: function() {
                    this.showHostedForm = this.selectedCard === '';

                    if (this.iframeInitialized === false && this.showHostedForm === true) {
                        // The initialized flag is to debounce and ensure we don't reinit unless absolutely necessary.
                        this.resetHostedForm();
                    }

                    this.toggleOrderButton();
                },
                resetHostedForm: function() {
                    // TODO: Trigger agreement validation before loading form
                    $wire.call('initHostedForm');
                },
                toggleOrderButton: function(event) {
                    let method = event && event.detail
                                 ? event.detail.method
                                 : document.querySelector('input[name="payment-method-option"]:checked').value;

                    if (method === '<?= $code ?>' && this.showHostedForm) {
                        document.querySelector('.btn-primary[x-bind="buttonPlaceOrder()"]').style.display = 'none';
                    } else {
                        document.querySelector('.btn-primary[x-bind="buttonPlaceOrder()"]').style.display = 'block';
                    }
                },
                loadHostedForm: function(event) {
                    let data = event.detail;

                    var iframe = $el.querySelector('iframe');

                    var form = document.createElement('form');
                    form.target = iframe.name;
                    form.method = 'post';
                    form.action = data.iframeAction;

                    for (let fieldKey in data.iframeParams) {
                        var input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = fieldKey;
                        input.value = data.iframeParams[fieldKey];
                        form.appendChild(input);
                    }

                    $el.appendChild(form);
                    form.submit();

                    // Reload the hosted form when it expires
                    setTimeout(this.reloadExpiredHostedForm.bind(this), 15*60*1000);

                    // Verify communicator connected
                    this.communicatorActive = false;
                    setTimeout(this.checkCommunicator.bind(this), 20*1000);

                    // There's an awkward break between 400-750px; set max width to avoid scrolling.
                    if (iframe.innerWidth > 400 && iframe.innerWidth < 750) {
                        iframe.style.maxWidth = '400px';
                    }

                    this.iframeInitialized = true;
                },
                reloadExpiredHostedForm: function() {
                    if (this.iframeInitialized === true) {
                        // If form has expired (15 minutes), and is still being displayed, force reload it.
                        this.resetHostedForm();
                    }
                },
                checkCommunicator: function() {
                    if (this.communicatorActive
                        || !this.showHostedForm
                        || this.iframeInitialized === false) {
                        return;
                    }

                    console.error('No message received from communicator.', message);
                    $wire.call('notifyCommunicatorFailure');
                },
                handleCommunication: function(event) {
                    if (!event.data
                        || !event.data.action
                        || this.showHostedForm === false) {
                        return;
                    }

                    if (typeof location.origin === 'undefined') {
                        location.origin = location.protocol + '//' + location.host;
                    }

                    if (event.origin !== location.origin) {
                        console.error('Ignored untrusted message from ' + event.origin);
                        return;
                    }

                    this.communicatorActive = true;

                    switch (event.data.action) {
                        case 'cancel':
                            this.resetHostedForm();
                            break;
                        case 'transactResponse':
                            this.handleResponse(JSON.parse(event.data.response));
                            break;
                        case 'successfulSave':
                            this.handleSave(event.data);
                            break;
                        case 'resizeWindow':
                            var height = Math.ceil(parseFloat(event.data.height)) + 80;
                            $el.querySelector('iframe').style.height = height + 'px';
                            break;
                    }
                },
                handleResponse: function(response) {
                    if (response.createPaymentProfileResponse !== undefined
                        && response.createPaymentProfileResponse.success === 'true') {
                        $wire.set('saveCard', true, true);
                    } else {
                        $wire.set('saveCard', false, true);
                    }

                    /**
                     * NOTE: To split iframe submission from Place Order (for steps after payment), nullify
                     * the functionality of this.toggleOrderButton() and this.placeMagentoOrder().
                     */
                    $wire.set('transactionId', response.transId, true);
                    $wire.call('submitTransaction')
                         .then(this.placeOrder.bind(this));

                    this.iframeInitialized = false;
                },
                handleSave: function(data) {
                    if (this.processingSave) {
                        return;
                    }

                    this.processingSave = true;

                    $wire.call('getNewCard', data)
                         .then(this.afterAddCard.bind(this));
                },
                afterAddCard: function(data) {
                    this.iframeInitialized = false;
                    this.processingSave = false;

                    <?php if ($formBlock->hasVerification() && $method->getConfigData('require_ccv')): ?>
                        $el.querySelector('#<?= $code ?>-cc-cid').focus();
                    <?php endif; ?>
                },
                placeOrder: function() {
                    hyvaCheckout.main.getWireComponent().placeOrder();
                },
            }
        }
    </script>
</div>
